//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Text;
using System.Collections;
/*
{
	"PATCH_LIST": [
		{"pid": 2, "hash": "263eb0fa95bd51ac00b3ab7132b4b6812cd92e54", "reboot": false}
	],
	"B_ID": 0,
	"PATCH_INFO_FILENAME": "patch_info.json",
	"APP": "guobao3",
	"VERESION": "1.0.1",
	"P_ID": 19,
	"HOST_CDN": "h005up.ultralisk.cn",
	"HOST": "h005.ultralisk.cn:4022",
	"PATCH_PATH": "cc_patch",
	"GIT_HASH": "4e45954e70c113e1ebd222fdb6ae6aaac93a7fb5",
	"CHANNEL": "and_release"
}
*/
public class PatchInfo {

	public const string KEY_PATCH_LIST = "PATCH_LIST";
	public const string KEY_P_ID = "P_ID";
	public const string KEY_HOST_CDN = "HOST_CDN";
	public const string KEY_HOST = "HOST";
	public const string KEY_PATCH_PATH = "PATCH_PATH";
	public const string KEY_GIT_HASH = "GIT_HASH";
	public const string KEY_CHANNEL = "CHANNEL";

	public const string KEY_SUB_PID = "pid";


	private Hashtable patchInfo = null;
	private ArrayList patchList = null;



	public PatchInfo( string jsonStr ){
		patchInfo = JSON.DecodeMap( jsonStr );
		patchList = (ArrayList)patchInfo[ KEY_PATCH_LIST ];
	}


	public int getPatchListCount(){
		if( patchList == null )
			return 0;

		return patchList.Count;
	}


	public int getPatchIdAt( int index ){
		Hashtable patchData = (Hashtable)patchList[ index ];
		if( patchData == null ) return 0;

		return (int)(double)patchData[ KEY_SUB_PID ];
	}


	public int getCurPatchId(){
		return  (int)(double)patchInfo[ KEY_P_ID ];
	}


	public void printInfo(){
		LuaFramework.Util.Log( string.Format( "path list count:{0}, cur pid:{1}", getPatchListCount(), getCurPatchId() ) );
	}






}


