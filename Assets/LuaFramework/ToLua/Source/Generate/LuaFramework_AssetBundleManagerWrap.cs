//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_AssetBundleManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.AssetBundleManager), typeof(Manager));
		L.RegFunction("SetSourceAssetBundleURL", SetSourceAssetBundleURL);
		L.RegFunction("SetDevelopmentAssetBundleServer", SetDevelopmentAssetBundleServer);
		L.RegFunction("GetLoadedAssetBundle", GetLoadedAssetBundle);
		L.RegFunction("IsAssetBundleDownloaded", IsAssetBundleDownloaded);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("UnloadAssetBundle", UnloadAssetBundle);
		L.RegFunction("LoadAssetAsync", LoadAssetAsync);
		L.RegFunction("LoadLevelAsync", LoadLevelAsync);
		L.RegFunction("LoadAsyncPrefab", LoadAsyncPrefab);
		L.RegFunction("LoadAsyncPrefab2", LoadAsyncPrefab2);
		L.RegFunction("LoadPrefab", LoadPrefab);
		L.RegFunction("OnLoadAssetBundle", OnLoadAssetBundle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("logMode", get_logMode, set_logMode);
		L.RegVar("ActiveVariants", get_ActiveVariants, set_ActiveVariants);
		L.RegVar("AssetBundleManifestObject", null, set_AssetBundleManifestObject);
		L.RegVar("overrideBaseDownloadingURL", get_overrideBaseDownloadingURL, set_overrideBaseDownloadingURL);
		L.RegFunction("OverrideBaseDownloadingURLDelegate", LuaFramework_AssetBundleManager_OverrideBaseDownloadingURLDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSourceAssetBundleURL(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFramework.AssetBundleManager.SetSourceAssetBundleURL(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDevelopmentAssetBundleServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LuaFramework.AssetBundleManager.SetDevelopmentAssetBundleServer();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoadedAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = null;
			LuaFramework.LoadedAssetBundle o = LuaFramework.AssetBundleManager.GetLoadedAssetBundle(arg0, out arg1);
			ToLua.PushObject(L, o);
			LuaDLL.lua_pushstring(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAssetBundleDownloaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = LuaFramework.AssetBundleManager.IsAssetBundleDownloaded(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaFramework.AssetBundleLoadManifestOperation o = LuaFramework.AssetBundleManager.Initialize();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				LuaFramework.AssetBundleLoadManifestOperation o = LuaFramework.AssetBundleManager.Initialize(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.AssetBundleManager.Initialize");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			LuaFramework.AssetBundleManager.UnloadAssetBundle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Type arg2 = (System.Type)ToLua.CheckObject(L, 3, typeof(System.Type));
			LuaFramework.AssetBundleLoadAssetOperation o = LuaFramework.AssetBundleManager.LoadAssetAsync(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLevelAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
			LuaFramework.AssetBundleLoadOperation o = LuaFramework.AssetBundleManager.LoadLevelAsync(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsyncPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaFramework.AssetBundleManager obj = (LuaFramework.AssetBundleManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			obj.LoadAsyncPrefab(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsyncPrefab2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaFramework.AssetBundleManager obj = (LuaFramework.AssetBundleManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			System.Action<UnityEngine.Object> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<UnityEngine.Object>)ToLua.CheckObject(L, 4, typeof(System.Action<UnityEngine.Object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
			}

			obj.LoadAsyncPrefab2(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.AssetBundleManager obj = (LuaFramework.AssetBundleManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.LoadPrefab(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLoadAssetBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			LuaFramework.AssetBundleManager obj = (LuaFramework.AssetBundleManager)ToLua.CheckObject(L, 1, typeof(LuaFramework.AssetBundleManager));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 4);
			System.Action<UnityEngine.Object> arg3 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<UnityEngine.Object>)ToLua.CheckObject(L, 5, typeof(System.Action<UnityEngine.Object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.Object>), func) as System.Action<UnityEngine.Object>;
			}

			System.Type arg4 = (System.Type)ToLua.CheckObject(L, 6, typeof(System.Type));
			System.Collections.IEnumerator o = obj.OnLoadAssetBundle(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logMode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.AssetBundleManager.logMode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ActiveVariants(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.AssetBundleManager.ActiveVariants);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_overrideBaseDownloadingURL(IntPtr L)
	{
		ToLua.Push(L, new EventObject("LuaFramework.AssetBundleManager.overrideBaseDownloadingURL"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logMode(IntPtr L)
	{
		try
		{
			LuaFramework.AssetBundleManager.LogMode arg0 = (LuaFramework.AssetBundleManager.LogMode)ToLua.CheckObject(L, 2, typeof(LuaFramework.AssetBundleManager.LogMode));
			LuaFramework.AssetBundleManager.logMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ActiveVariants(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			LuaFramework.AssetBundleManager.ActiveVariants = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetBundleManifestObject(IntPtr L)
	{
		try
		{
			UnityEngine.AssetBundleManifest arg0 = (UnityEngine.AssetBundleManifest)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.AssetBundleManifest));
			LuaFramework.AssetBundleManager.AssetBundleManifestObject = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_overrideBaseDownloadingURL(IntPtr L)
	{
		try
		{
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'LuaFramework.AssetBundleManager.overrideBaseDownloadingURL' can only appear on the left hand side of += or -= when used outside of the type 'LuaFramework.AssetBundleManager'");
			}

			if (arg0.op == EventOp.Add)
			{
				LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate ev = (LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate)DelegateFactory.CreateDelegate(typeof(LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate), arg0.func);
				LuaFramework.AssetBundleManager.overrideBaseDownloadingURL += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate ev = (LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate)LuaMisc.GetEventHandler(null, typeof(LuaFramework.AssetBundleManager), "overrideBaseDownloadingURL");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						LuaFramework.AssetBundleManager.overrideBaseDownloadingURL -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaFramework_AssetBundleManager_OverrideBaseDownloadingURLDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(LuaFramework.AssetBundleManager.OverrideBaseDownloadingURLDelegate), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

